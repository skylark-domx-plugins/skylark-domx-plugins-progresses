{"version":3,"sources":["progress.js"],"names":["define","langx","styler","noder","eventer","$","plugins","ranges","Progress","Plugin","inherit","klassName","pluginName","options","selectors","progressBar","seek","seekTooltip","_construct","elm","prototype","call","this","$el","$progressBar","find","$seek","$seekTooltip","listenTo","updateSeekTooltip","skipAhead","formatTime","timeInSeconds","result","Date","toISOString","substr","minutes","seconds","updateDuration","media","_media","duration","Math","round","attr","updateProgress","currentTime","val","event","skipTo","offsetX","target","clientWidth","parseInt","getAttribute","t","text","dataset","value","register"],"mappings":";;;;;;;AAAAA,QACE,gBACA,sBACA,qBACA,uBACA,qBACA,4BACA,YACA,SAASC,EAAMC,EAAOC,EAAOC,EAAQC,EAAIC,EAAQC,GACjD,aAEA,IAAIC,EAAWF,EAAQG,OAAOC,SAC5BC,UAAY,WAEZC,WAAa,wBAEbC,SACEC,WACEC,YAAc,gBACdC,KAAO,QACPC,YAAc,kBAKlBC,WAAY,SAASC,EAAKN,GACxBP,EAAQG,OAAOW,UAAUF,WAAWG,KAAKC,KAAKH,EAAIN,GAElD,IAAIU,EAAMD,KAAKjB,IACXS,EAAYQ,KAAKT,QAAQC,UAG7BQ,KAAKE,aAAeD,EAAIE,KAAKX,EAAUC,aACvCO,KAAKI,MAAQH,EAAIE,KAAKX,EAAUE,MAChCM,KAAKK,aAAeJ,EAAIE,KAAKX,EAAUG,aAGvCK,KAAKM,SAASN,KAAKI,MAAM,YAAYJ,KAAKO,mBAC1CP,KAAKM,SAASN,KAAKI,MAAM,QAAQJ,KAAKQ,YAMxCC,WAAa,SAAUC,GACrB,MAAMC,EAAS,IAAIC,KAAqB,IAAhBF,GAAsBG,cAAcC,OAAO,GAAI,GAEvE,OACEC,QAASJ,EAAOG,OAAO,EAAG,GAC1BE,QAASL,EAAOG,OAAO,EAAG,KAM9BG,eAAiB,WACf,IAAIC,EAAQlB,KAAKmB,OACjB,MAAMC,EAAWC,KAAKC,MAAMJ,EAAME,YAClCpB,KAAKI,MAAMmB,KAAK,MAAOH,GACvBpB,KAAKE,aAAaqB,KAAK,MAAOH,IAMhCI,eAAiB,SAAUC,GACvBzB,KAAKI,MAAMsB,IAAID,GACfzB,KAAKE,aAAawB,IAAID,IAM1BlB,kBAAoB,SAAUoB,GAC5B,MAAMC,EAASP,KAAKC,MACjBK,EAAME,QAAUF,EAAMG,OAAOC,YAC5BC,SAASL,EAAMG,OAAOG,aAAa,OAAQ,KAE/CjC,KAAKI,MAAMmB,KAAK,OAAQK,GACxB,MAAMM,EAAIlC,KAAKS,WAAWmB,GAC1B5B,KAAKK,aAAa8B,QAAQD,EAAEnB,WAAWmB,EAAElB,YAQ3CR,UAAY,SAAUmB,GACpB,MAAMC,EAASD,EAAMG,OAAOM,QAAQ1C,KAChCiC,EAAMG,OAAOM,QAAQ1C,KACrBiC,EAAMG,OAAOO,MAIjBrC,KAAKE,aAAawB,IAAIE,GACtB5B,KAAKI,MAAMsB,IAAIE,MAQnB,OAFA5C,EAAQsD,SAASpD,GAEVD,EAAOC,SAAWA","file":"../progress.js","sourcesContent":["define([\r\n  \"skylark-langx\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./ranges\"\r\n],function(langx,styler,noder, eventer,$ , plugins,ranges) {\r\n  'use strict'\r\n\r\n  var Progress = plugins.Plugin.inherit({\r\n    klassName : \"Progress\",\r\n\r\n    pluginName : \"domx.ranges.progressl\",\r\n   \r\n    options : {\r\n      selectors : {\r\n        progressBar : '.progress-bar',\r\n        seek : '.seek',\r\n        seekTooltip : '.seek-tooltip'\r\n      }\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          selectors = this.options.selectors;\r\n\r\n\r\n      this.$progressBar = $el.find(selectors.progressBar);\r\n      this.$seek = $el.find(selectors.seek);\r\n      this.$seekTooltip = $el.find(selectors.seekTooltip);\r\n\r\n      // Add eventlisteners here\r\n      this.listenTo(this.$seek,'mousemove',this.updateSeekTooltip);\r\n      this.listenTo(this.$seek,'input',this.skipAhead);\r\n\r\n    },\r\n\r\n    // formatTime takes a time length in seconds and returns the time in\r\n    // minutes and seconds\r\n    formatTime : function (timeInSeconds) {\r\n      const result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);\r\n\r\n      return {\r\n        minutes: result.substr(3, 2),\r\n        seconds: result.substr(6, 2),\r\n      };\r\n    },\r\n\r\n    // initializeVideo sets the video duration, and maximum value of the\r\n    // progressBar\r\n    updateDuration : function () {\r\n      var media = this._media;\r\n      const duration = Math.round(media.duration());        \r\n      this.$seek.attr('max', duration);\r\n      this.$progressBar.attr('max', duration);\r\n    },\r\n\r\n\r\n    // updateProgress indicates how far through the video\r\n    // the current playback is by updating the progress bar\r\n    updateProgress : function (currentTime) {\r\n        this.$seek.val(currentTime);\r\n        this.$progressBar.val(currentTime);\r\n    },\r\n\r\n    // updateSeekTooltip uses the position of the mouse on the progress bar to\r\n    // roughly work out what point in the video the user will skip to if\r\n    // the progress bar is clicked at that point\r\n    updateSeekTooltip : function (event) {\r\n      const skipTo = Math.round(\r\n        (event.offsetX / event.target.clientWidth) *\r\n          parseInt(event.target.getAttribute('max'), 10)\r\n      );\r\n      this.$seek.attr('seek', skipTo);\r\n      const t = this.formatTime(skipTo);\r\n      this.$seekTooltip.text(`${t.minutes}:${t.seconds}`);\r\n      //const rect = this._media.getBoundingClientRect();\r\n      ///const pos = this._media.pagePosition();\r\n      ///this.$seekTooltip.css(\"left\", `${event.pageX - pos.left}px`);\r\n    },\r\n\r\n    // skipAhead jumps to a different point in the video when the progress bar\r\n    // is clicked\r\n    skipAhead : function (event) {\r\n      const skipTo = event.target.dataset.seek\r\n        ? event.target.dataset.seek\r\n        : event.target.value;\r\n\r\n      ///let media = this._media;\r\n      ///media.currentTime(skipTo);\r\n      this.$progressBar.val(skipTo);\r\n      this.$seek.val(skipTo);\r\n    },\r\n\r\n\r\n  });\r\n\r\n  plugins.register(Progress);\r\n\r\n  return ranges.Progress = Progress;\r\n});"]}